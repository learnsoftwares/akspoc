apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: config-server
  template:
    metadata:
      labels:
        app: config-server
    spec:
      containers:
      - name: config-server
        image: bryannoland/spring-petclinic-config-server
        ports:
        - containerPort: 8888
        command: ["java", "-Djdk.tls.client.protocols=TLSv1.1,TLSv1.2", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]       
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-server
  template:
    metadata:
      labels:
        app: discovery-server
    spec:
      containers:
      - name: discovery-server
        image: bryannoland/spring-petclinic-discovery-server
        ports:
        - containerPort: 8761
        command: ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]
        # Uncomment below line if you have wait-for-it.sh in your local directory
        # volumeMounts:
        # - name: wait-for-it
        #   mountPath: /usr/src/app/wait-for-it.sh
      # Uncomment below section if you have wait-for-it.sh in your local directory
      # volumes:
      #  - name: wait-for-it
      #    configMap:
      #      name: wait-for-it
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customers-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customers-service
  template:
    metadata:
      labels:
        app: customers-service
    spec:
      containers:
      - name: customers-service
        image: bryannoland/spring-petclinic-customers-service
        ports:
        - containerPort: 8081
        command: ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]
        # Uncomment below line if you have wait-for-it.sh in your local directory
        # volumeMounts:
        # - name: wait-for-it
        #   mountPath: /usr/src/app/wait-for-it.sh
      # Uncomment below section if you have wait-for-it.sh in your local directory
      # volumes:
      #  - name: wait-for-it
      #    configMap:
      #      name: wait-for-it
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: visits-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: visits-service
  template:
    metadata:
      labels:
        app: visits-service
    spec:
      containers:
      - name: visits-service
        image: bryannoland/spring-petclinic-visits-service
        ports:
        - containerPort: 8082
        command: ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]
        # Uncomment below line if you have wait-for-it.sh in your local directory
        # volumeMounts:
        # - name: wait-for-it
        #   mountPath: /usr/src/app/wait-for-it.sh
      # Uncomment below section if you have wait-for-it.sh in your local directory
      # volumes:
      #  - name: wait-for-it
      #    configMap:
      #      name: wait-for-it
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vets-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vets-service
  template:
    metadata:
      labels:
        app: vets-service
    spec:
      containers:
        - name: vets-service
          image: bryannoland/spring-petclinic-vets-service
          ports:
            - containerPort: 8083
          command: ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]
          # Uncomment below line if you have wait-for-it.sh in your local directory
          # volumeMounts:
          # - name: wait-for-it
          #   mountPath: /usr/src/app/wait-for-it.sh
          # Uncomment below section if you have wait-for-it.sh in your local directory
          # volumes:
          #  - name: wait-for-it
          #    configMap:
          #      name: wait-for-it
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
        - name: api-gateway
          image: bryannoland/spring-petclinic-api-gateway
          ports:
            - containerPort: 8080
          command: ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app.jar"]
          # Uncomment below line if you have wait-for-it.sh in your local directory
          # volumeMounts:
          # - name: wait-for-it
          #   mountPath: /usr/src/app/wait-for-it.sh
          # Uncomment below section if you have wait-for-it.sh in your local directory
          # volumes:
          #  - name: wait-for-it
          #    configMap:
          #      name: wait-for-it
---
apiVersion: v1
kind: Service
metadata:
  name: customers-service
spec:
  selector:
    app: customers-service
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: visits-service
spec:
  selector:
    app: visits-service
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: vets-service
spec:
  selector:
    app: vets-service
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: config-server
spec:
  selector:
    app: config-server
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
---
apiVersion: v1
kind: Service
metadata:
  name: discovery-server
spec:
  selector:
    app: discovery-server
  ports:
  - protocol: TCP
    port: 8761
    targetPort: 8761
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  rules:
    - host: coxakspoc.local # Replace with your own domain name
      http:
        paths:
          - path: /api/customers/**
            pathType: Prefix
            backend:
              service:
                name: customers-service
                port:
                  number: 8081
          - path: /api/visits/**
            pathType: Prefix
            backend:
              service:
                name: visits-service
                port:
                  number: 8082
          - path: /api/vets/**
            pathType: Prefix
            backend:
              service:
                name: vets-service
                port:
                  number: 8083
          - path: /api/**
            pathType: Prefix
            backend:
              service:
                name: api-gateway
                port:
                  number: 8080				  
